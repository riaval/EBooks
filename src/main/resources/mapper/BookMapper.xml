<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ua.miratech.zhukov.mapper.BookMapper">

    <resultMap id="bookMap" type="ua.miratech.zhukov.dto.Book">
        <id column="BOOK_ID" property="id" />
        <result column="AUTHOR" property="author" />
        <result column="TITLE" property="title" />
        <result column="PUB_DATE" property="publicationDate" />
        <result column="FILE_NAME" property="fileName" />
        <result column="BOOK_SIZE" property="size" javaType="java.lang.Long" />
        <result column="SHA1" property="sha1" />
        <result column="EMAIL" property="owner" />
        <result column="LANGUAGE_NAME" property="language" />
        <result column="BOOK_TYPE_NAME" property="extension" />
        <result column="ANNOTATION" property="annotation" />
        <result column="ISBN" property="isbn" />
        <result column="SHARED_TYPE_NAME" property="sharedType" />
        <result column="STORED_INDEX" property="storedIndex" />
        <collection column="GENRE_NAME" property="genres" javaType="ArrayList" ofType="String"/>
    </resultMap>

    <select id="getLastBooks" resultMap="bookMap">
        SELECT * FROM
        (
            SELECT a.*, rownum r__
            FROM
            (
                SELECT
                  GENRE_NAME,
                  BOOK_ID,
                  AUTHOR,
                  TITLE,
                  PUB_DATE,
                  FILE_NAME,
                  BOOK_SIZE,
                  SHA1,
                  EMAIL,
                  LANGUAGE_NAME,
                  BOOK_TYPE_NAME,
                  ANNOTATION,
                  ISBN,
                  SHARED_TYPE_NAME,
                  STORED_INDEX
                FROM
                  BOOKS
                INNER JOIN
                  USERS
                    ON BOOKS.ID_OWNER = USERS.USER_ID
                INNER JOIN
                  LANGUAGES
                    ON BOOKS.ID_LANG = LANGUAGES.LANGUAGE_ID
                INNER JOIN
                  BOOK_TYPES
                    ON BOOKS.ID_BOOK_TYPE = BOOK_TYPES.BOOK_TYPE_ID
                INNER JOIN
                  SHARED_TYPES
                    ON BOOKS.ID_SHARED_TYPE = SHARED_TYPES.SHARED_TYPE_ID
                INNER JOIN
                  BOOKS_GENRES
                    ON BOOKS.BOOK_ID = BOOKS_GENRES.BOOK_ID
                INNER JOIN
                  GENRES
                    ON BOOKS_GENRES.GENRE_ID = GENRES.GENRE_ID
                LEFT JOIN
                  SHARED
                    ON BOOKS.BOOK_ID = SHARED.ID_BOOK
                WHERE
                  UPPER(SHARED_TYPE_NAME) = 'PUBLIC'
                    OR
                  SHARED.ID_GRANTEE = (SELECT USER_ID FROM USERS WHERE EMAIL = #{currentUserEmail})
                ORDER BY BOOKS.PUB_DATE DESC
            ) a
            WHERE rownum <![CDATA[ < ]]> ((#{pageNumber} * #{pageSize}) + 1 )
        )
        WHERE r__ >= (((#{pageNumber}-1) * #{pageSize}) + 1)
    </select>

    <select id="getMyBooks" resultMap="bookMap">
        SELECT
          GENRE_NAME,
          BOOK_ID,
          AUTHOR,
          TITLE,
          PUB_DATE,
          FILE_NAME,
          BOOK_SIZE,
          SHA1,
          EMAIL,
          LANGUAGE_NAME,
          BOOK_TYPE_NAME,
          ANNOTATION,
          ISBN,
          SHARED_TYPE_NAME,
          STORED_INDEX
        FROM
          BOOKS
        INNER JOIN
          USERS
            ON BOOKS.ID_OWNER = USERS.USER_ID
        INNER JOIN
          LANGUAGES
            ON BOOKS.ID_LANG = LANGUAGES.LANGUAGE_ID
        INNER JOIN
          BOOK_TYPES
            ON BOOKS.ID_BOOK_TYPE = BOOK_TYPES.BOOK_TYPE_ID
        INNER JOIN
          SHARED_TYPES
            ON BOOKS.ID_SHARED_TYPE = SHARED_TYPES.SHARED_TYPE_ID
        INNER JOIN
          BOOKS_GENRES
            ON BOOKS.BOOK_ID = BOOKS_GENRES.BOOK_ID
        INNER JOIN
          GENRES
            ON BOOKS_GENRES.GENRE_ID = GENRES.GENRE_ID
        WHERE
          EMAIL = #{userEmail}
        ORDER BY BOOKS.PUB_DATE ${orderBy}
    </select>

    <select id="getBookById" resultMap="bookMap">
        SELECT
          BOOK_ID,
          AUTHOR,
          TITLE,
          PUB_DATE,
          FILE_NAME,
          BOOK_SIZE,
          SHA1,
          EMAIL,
          LANGUAGE_NAME,
          BOOK_TYPE_NAME,
          ANNOTATION,
          ISBN,
          SHARED_TYPE_NAME,
          STORED_INDEX
        FROM
          BOOKS
        INNER JOIN
          USERS
            ON BOOKS.ID_OWNER = USERS.USER_ID
        INNER JOIN
          LANGUAGES
            ON BOOKS.ID_LANG = LANGUAGES.LANGUAGE_ID
        INNER JOIN
          BOOK_TYPES
            ON BOOKS.ID_BOOK_TYPE = BOOK_TYPES.BOOK_TYPE_ID
        INNER JOIN
          SHARED_TYPES
            ON BOOKS.ID_SHARED_TYPE = SHARED_TYPES.SHARED_TYPE_ID
        WHERE
          BOOK_ID = #{id,javaType=Long,jdbcType=NUMERIC}
    </select>

    <select id="getBookForReadingById" resultMap="bookMap">
        SELECT
          GENRE_NAME,
          BOOK_ID,
          AUTHOR,
          TITLE,
          PUB_DATE,
          FILE_NAME,
          BOOK_SIZE,
          SHA1,
          EMAIL,
          LANGUAGE_NAME,
          BOOK_TYPE_NAME,
          ANNOTATION,
          ISBN,
          SHARED_TYPE_NAME,
          STORED_INDEX
        FROM
          BOOKS
        INNER JOIN
          USERS
            ON BOOKS.ID_OWNER = USERS.USER_ID
        INNER JOIN
          LANGUAGES
            ON BOOKS.ID_LANG = LANGUAGES.LANGUAGE_ID
        INNER JOIN
          BOOK_TYPES
            ON BOOKS.ID_BOOK_TYPE = BOOK_TYPES.BOOK_TYPE_ID
        INNER JOIN
          SHARED_TYPES
            ON BOOKS.ID_SHARED_TYPE = SHARED_TYPES.SHARED_TYPE_ID
        INNER JOIN
          BOOKS_GENRES
            ON BOOKS.BOOK_ID = BOOKS_GENRES.BOOK_ID
        INNER JOIN
          GENRES
            ON BOOKS_GENRES.GENRE_ID = GENRES.GENRE_ID
        LEFT JOIN
          SHARED
            ON BOOKS.BOOK_ID = SHARED.ID_BOOK
        WHERE
          (EMAIL = #{userEmail}
            OR
          UPPER(SHARED_TYPE_NAME) = 'PUBLIC'
            OR
          SHARED.ID_GRANTEE = (SELECT USER_ID FROM USERS WHERE EMAIL = #{userEmail}))
            AND
          BOOK_ID = #{bookId}
        ORDER BY BOOKS.PUB_DATE DESC
    </select>
    
    <select id="getBooksByStoredIndex" resultMap="bookMap">
        SELECT
          BOOK_ID,
          AUTHOR,
          TITLE,
          PUB_DATE,
          FILE_NAME,
          BOOK_SIZE,
          SHA1,
          EMAIL,
          LANGUAGE_NAME,
          BOOK_TYPE_NAME,
          ANNOTATION,
          ISBN,
          SHARED_TYPE_NAME,
          STORED_INDEX
        FROM
          BOOKS
        INNER JOIN
          USERS
            ON BOOKS.ID_OWNER = USERS.USER_ID
        INNER JOIN
          LANGUAGES
            ON BOOKS.ID_LANG = LANGUAGES.LANGUAGE_ID
        INNER JOIN
          BOOK_TYPES
            ON BOOKS.ID_BOOK_TYPE = BOOK_TYPES.BOOK_TYPE_ID
        INNER JOIN
          SHARED_TYPES
            ON BOOKS.ID_SHARED_TYPE = SHARED_TYPES.SHARED_TYPE_ID
        WHERE
          STORED_INDEX = #{storedIndex,javaType=Long,jdbcType=NUMERIC}
    </select>

    <select id="countBookByStoredIndex" resultType="java.lang.Long">
        SELECT
          COUNT(*)
        FROM
          BOOKS
        INNER JOIN
          USERS
            ON BOOKS.ID_OWNER = USERS.USER_ID
        INNER JOIN
          LANGUAGES
            ON BOOKS.ID_LANG = LANGUAGES.LANGUAGE_ID
        INNER JOIN
          BOOK_TYPES
            ON BOOKS.ID_BOOK_TYPE = BOOK_TYPES.BOOK_TYPE_ID
        INNER JOIN
          SHARED_TYPES
            ON BOOKS.ID_SHARED_TYPE = SHARED_TYPES.SHARED_TYPE_ID
        WHERE
          STORED_INDEX = #{storedIndex,javaType=Long,jdbcType=NUMERIC}
    </select>

    <select id="add" parameterType="ua.miratech.zhukov.dto.Book" statementType="CALLABLE">
        {#{id,javaType=Long,jdbcType=NUMERIC,mode=OUT} = call  INSERT_BOOK(
             #{author}
            ,#{title}
            ,#{publicationDate}
            ,#{fileName}
            ,#{size,javaType=LONG}
            ,#{sha1}
            ,#{owner}
            ,#{language}
            ,#{extension}
            ,#{annotation}
            ,#{isbn}
            ,#{sharedType}
          )
       }
    </select>

    <delete id="delete">
        DELETE FROM
          BOOKS
        WHERE
          BOOK_ID = #{bookId}
            AND
          (
            ID_OWNER = (SELECT USER_ID FROM USERS WHERE EMAIL = #{userEmail})
              OR
            (SELECT ROLE_NAME FROM USERS INNER JOIN ROLES ON USERS.ROLE_ID = ROLES.ROLE_ID WHERE EMAIL = #{userEmail}) = 'ROLE_ADMIN'
          )
    </delete>

    <select id="addGenre" parameterType="ua.miratech.zhukov.dto.Book" statementType="CALLABLE">
      INSERT INTO BOOKS_GENRES (BOOK_ID, GENRE_ID) VALUES (#{userId}, GET_GENRE_ID_BY_NAME(#{genreName}))
    </select>

    <update id="updateBook" parameterType="ua.miratech.zhukov.dto.controller.EditedBookInParam">
      UPDATE
        BOOKS
      SET
        AUTHOR = #{author},
        TITLE = #{title},
        ANNOTATION = #{annotation},
        ISBN = #{isbn}
      WHERE
        BOOK_ID = #{id}
    </update>

    <update id="setSharedType">
        UPDATE
          BOOKS
        SET
          ID_SHARED_TYPE = (SELECT SHARED_TYPE_ID FROM SHARED_TYPES WHERE UPPER(SHARED_TYPE_NAME) = #{sharedType})
        WHERE
          BOOK_ID = #{bookId}
            AND
          ID_OWNER = (SELECT USER_ID FROM USERS WHERE EMAIL = #{userEmail})
    </update>

    <select id="share" parameterType="ua.miratech.zhukov.dto.mapper.ShareInParam" statementType="CALLABLE">
       {#{resultStatus,javaType=Integer,jdbcType=NUMERIC,mode=OUT} = call SHARE_BOOK (
              #{bookId}
            , #{ownerEmail}
            , #{granteeEmail}
          )
       }
    </select>

    <delete id="unShareBook">
      DELETE FROM SHARED WHERE
        ID_BOOK = #{bookId} AND
        ID_OWNER = (SELECT USER_ID FROM USERS WHERE EMAIL = #{ownerEmail}) AND
        ID_GRANTEE = #{granteeID}
    </delete>

</mapper>